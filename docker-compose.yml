version: '3.8'

services:
  db:
    image: postgres:16
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - inventory-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - inventory-network

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - inventory-network

  app:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      REDIS_HOST: ${REDIS_HOST}
      MONGO_HOST: ${MONGO_HOST}
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      mongodb:
        condition: service_started
    networks:
      - inventory-network

  migrate:
    image: migrate/migrate
    command: [
      "-path", "/migrations",
      "-database", "postgres://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}?sslmode=disable",
      "up"
    ]
    volumes:
      - ./migrations:/migrations
    depends_on:
      db:
        condition: service_healthy
    networks:
      - inventory-network

  adminer:
    image: adminer:latest
    ports:
      - "8081:8080"
    networks:
      - inventory-network

volumes:
  db-data:
  mongo-data:

networks:
  inventory-network: